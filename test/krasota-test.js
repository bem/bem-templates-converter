// parsing comments

var syntax = require(".."),
    assert = require("assert"),
    test = require("./common").testKParse;

var ibem = require('fs')
      .readFileSync(
        __dirname + '/../bower_components/bem-core/common.blocks/i-bem/i-bem.bemhtml',
        'utf8'),
    compat = require("bemhtml-compat"),
    esprima = require("esprima"),
    esgen = require("escodegen").generate,
    path = require("path"),
    fs = require("fs");


var dir = path.join(path.dirname(module.filename), 'basic'),
    utf8 = { encoding:'utf8' },
    tests = [
      'info1',                  //whole-line
      'info2',                  //end-of-line
      'info5'                   //multi
    ].map(function (f) {
      return fs.readFileSync(path.join(dir, f + '.bemhtml'), utf8);
    });

describe.only('Meta info', function() {

  it('should parse whole-line comments', function() {
    test(tests[0],
         []
         // [ 'stmts',
         //   [ 'stmt',
         //     [ 'spacesAndComments',
         //       [ [ 'comment', '// comment here' ], [ 'spaces', '\n' ] ] ],
         //     [ 'exprStmt',
         //       [ 'callExpr',
         //         [ 'callExpr',
         //           [ 'getExprDot',
         //             [ 'callExpr',
         //               [ 'name', 'block' ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments', [] ],
         //             [ 'spacesAndComments', [] ],
         //             [ 'name', 'tag' ] ],
         //           [ 'spacesAndComments', [] ],
         //           [ 'spacesAndComments', [] ] ],
         //         [ 'spacesAndComments', [] ],
         //         [ 'commaList',
         //           [ 'arg',
         //             [ 'spacesAndComments', [] ],
         //             [ 'string', '\'', [ 'i', 'm', 'g' ] ],
         //             [ 'spacesAndComments', [] ] ] ] ] ],
         //     [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
         //     [ 'spacesAndComments', [] ] ] ]
        );
  });

  it('should parse end-of-line comments', function() {
    test(tests[1],
         []
         // [ 'stmts',
         //   [ 'stmt',
         //     [ 'spacesAndComments', [] ],
         //     [ 'exprStmt',
         //       [ 'callExpr',
         //         [ 'callExpr',
         //           [ 'name', 'block' ],
         //           [ 'spacesAndComments', [] ],
         //           [ 'commaList',
         //             [ 'arg',
         //               [ 'spacesAndComments', [] ],
         //               [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ],
         //               [ 'spacesAndComments', [] ] ] ] ],
         //         [ 'spacesAndComments', [] ],
         //         [ 'commaList',
         //           [ 'arg',
         //             [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
         //             [ 'callExpr',
         //               [ 'callExpr',
         //                 [ 'name', 'tag' ],
         //                 [ 'spacesAndComments', [] ],
         //                 [ 'spacesAndComments', [] ] ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'string', '\'', [ 'i', 'm', 'g' ] ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments', [] ] ],
         //           [ 'arg',
         //             [ 'spacesAndComments',
         //               [ [ 'spaces', '                              ' ],
         //                 [ 'comment', '// end of line comment' ],
         //                 [ 'spaces', '\n  ' ] ] ],
         //             [ 'callExpr',
         //               [ 'callExpr',
         //                 [ 'name', 'attrs' ],
         //                 [ 'spacesAndComments', [] ],
         //                 [ 'spacesAndComments', [] ] ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'obj',
         //                     [ 'commaList',
         //                       [ 'objItem',
         //                         [ 'spacesAndComments', [] ],
         //                         [ 'name', 'alt' ],
         //                         [ 'spacesAndComments', [] ],
         //                         [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                         [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ],
         //                         [ 'spacesAndComments', [] ] ],
         //                       [ 'objItem',
         //                         [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                         [ 'name', 'href' ],
         //                         [ 'spacesAndComments', [] ],
         //                         [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                         [ 'string',
         //                           '\'',
         //                           [ 'h', 't', 't', 'p', ':', '/', '/', '.', '.', '.' ] ],
         //                         [ 'spacesAndComments', [] ] ] ] ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments',
         //               [ [ 'spaces', ' ' ],
         //                 [ 'comment', '// another comment' ],
         //                 [ 'spaces', '\n' ] ] ] ] ] ] ],
         //     [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
         //     [ 'spacesAndComments', [] ] ] ]
        );
  });

  it('should parse multi-line comments', function() {
    test(tests[1],
         []
         // [ 'stmts',
         //   [ 'stmt',
         //     [ 'spacesAndComments',
         //       [ [ 'comment',
         //           '/*\n *\n  long winded comment here with code inside\n\n  block(\'logo\')(\n  tag()(\'img\'),\n  attrs()({alt: \'logo\', href: \'http://...\'})\n  )\n *\n*/' ],
         //         [ 'spaces', '\n\n' ] ] ],
         //     [ 'exprStmt',
         //       [ 'callExpr',
         //         [ 'callExpr',
         //           [ 'name', 'block' ],
         //           [ 'spacesAndComments', [] ],
         //           [ 'commaList',
         //             [ 'arg',
         //               [ 'spacesAndComments', [] ],
         //               [ 'string', '\'', [ 'b', '-', 'b', 'l', 'a' ] ],
         //               [ 'spacesAndComments', [] ] ] ] ],
         //         [ 'spacesAndComments', [] ],
         //         [ 'commaList',
         //           [ 'arg',
         //             [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
         //             [ 'callExpr',
         //               [ 'callExpr',
         //                 [ 'name', 'tag' ],
         //                 [ 'spacesAndComments', [] ],
         //                 [ 'spacesAndComments', [] ] ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'string', '\'', [ 's', 'p', 'a', 'n' ] ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments', [] ] ],
         //           [ 'arg',
         //             [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
         //             [ 'callExpr',
         //               [ 'callExpr',
         //                 [ 'getExprDot',
         //                   [ 'callExpr',
         //                     [ 'name', 'mod' ],
         //                     [ 'spacesAndComments', [] ],
         //                     [ 'commaList',
         //                       [ 'arg',
         //                         [ 'spacesAndComments', [] ],
         //                         [ 'string', '\'', [ '0', '-', 'm', 'o', 'd', 'e' ] ],
         //                         [ 'spacesAndComments', [] ] ],
         //                       [ 'arg',
         //                         [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                         [ 'string', '\'', [ 'v', '2' ] ],
         //                         [ 'spacesAndComments', [] ] ] ] ],
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'name', 'tag' ] ],
         //                 [ 'spacesAndComments', [] ],
         //                 [ 'spacesAndComments', [] ] ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'string', '\'', [ 'a' ] ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments', [] ] ],
         //           [ 'arg',
         //             [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
         //             [ 'callExpr',
         //               [ 'callExpr',
         //                 [ 'name', 'mix' ],
         //                 [ 'spacesAndComments', [] ],
         //                 [ 'spacesAndComments', [] ] ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'arr',
         //                     [ 'commaList',
         //                       [ 'arrItem',
         //                         [ 'spacesAndComments', [] ],
         //                         [ 'obj',
         //                           [ 'commaList',
         //                             [ 'objItem',
         //                               [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                               [ 'name', 'elemMods' ],
         //                               [ 'spacesAndComments', [] ],
         //                               [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                               [ 'obj',
         //                                 [ 'commaList',
         //                                   [ 'objItem',
         //                                     [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                                     [ 'name', 'm2' ],
         //                                     [ 'spacesAndComments', [] ],
         //                                     [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
         //                                     [ 'string', '\'', [ 'v', '2' ] ],
         //                                     [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
         //                               [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
         //                         [ 'spacesAndComments', [] ] ] ] ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments', [] ] ],
         //           [ 'arg',
         //             [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
         //             [ 'callExpr',
         //               [ 'callExpr',
         //                 [ 'name', 'js' ],
         //                 [ 'spacesAndComments', [] ],
         //                 [ 'spacesAndComments', [] ] ],
         //               [ 'spacesAndComments', [] ],
         //               [ 'commaList',
         //                 [ 'arg',
         //                   [ 'spacesAndComments', [] ],
         //                   [ 'bool', 'true' ],
         //                   [ 'spacesAndComments', [] ] ] ] ],
         //             [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ],
         //     [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
         //     [ 'spacesAndComments', [] ] ] ]
        );
  });

});
