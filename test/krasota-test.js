// parsing comments

var syntax = require(".."),
    assert = require("assert"),
    common = require("./common"),
    testCompile = common.testKCompile,
    testDir = common.testDir;

var ibem = require('fs')
      .readFileSync(
        __dirname + '/../bower_components/bem-core/common.blocks/i-bem/i-bem.bemhtml',
        'utf8'),
    compat = require("bemhtml-compat"),
    esprima = require("esprima"),
    esgen = require("escodegen").generate,
    path = require("path"),
    fs = require("fs");

var pp = require("zeHelpers").prettyPrint;

var dir = path.dirname(module.filename),
    utf8 = { encoding:'utf8' },
    getSource = function (file) {
      return fs.readFileSync(path.join(dir, file), utf8);
    },
    testParse = function (file, result) {
      var source = getSource(file);
      common.testKParse(source, result);
    },
    testTransform = function (file, options) {
      var source = getSource(file),
          result = getSource(file + '.js');
      common.testKTransform(source, result, options);
    };

describe('Meta info', function() {

  describe('Parser', function () {

    it('should parse mixed js and templates', function () {
      testParse('./kparser/ext-js.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'funcStmt',
                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                      [ 'name', 'outside' ],
                      [ 'spacesAndComments', [] ],
                      [ 'commaList',
                        [ 'funcArg',
                          [ 'spacesAndComments', [] ],
                          [ 'name', 'a' ],
                          [ 'spacesAndComments', [] ] ],
                        [ 'funcArg',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'name', 'b' ],
                          [ 'spacesAndComments', [] ] ] ],
                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                      [ 'blockStmt',
                        [ 'stmts',
                          [ 'stmt',
                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                            [ 'returnStmt',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'string', '\'', [ 'h', 'e', 'l', 'l', 'o' ] ],
                              [ 'spacesAndComments', [] ] ],
                            [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                            [ 'spacesAndComments', [] ] ] ] ] ],
                    [ 'stmtEnd' ],
                    [ 'spacesAndComments', [] ] ],
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'emptyStmt' ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ],
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'b', '1' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'content' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'literalBody', [ 'string', '\'', [ 'b', 'l', 'a' ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [] ] ] ])
    })

    it('should parse multiple templates', function () {
      testParse('basic/info6.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value',
                                  [ 'string',
                                    '\'',
                                    [ 'b', '-', 'w', 'r', 'a', 'p', 'p', 'e', 'r' ] ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'tag' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody', [ 'string', '\'', [ 'w', 'r', 'a', 'p' ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'content' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'generalBody',
                                    [ 'blockStmt',
                                      [ 'stmts',
                                        [ 'stmt',
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'returnStmt',
                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                            [ 'getExprDot',
                                              [ 'getExprDot',
                                                [ 'keyword', 'this' ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', 'ctx' ] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', 'content' ] ],
                                            [ 'spacesAndComments', [] ] ],
                                          [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                          [ 'spacesAndComments', [] ] ] ] ] ] ] ] ],
                            [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ],
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value',
                                  [ 'string', '\'', [ 'b', '-', 'i', 'n', 'n', 'e', 'r' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'def' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'generalBody',
                            [ 'blockStmt',
                              [ 'stmts',
                                [ 'stmt',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'returnStmt',
                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                    [ 'xjst',
                                      [ 'applyCtx',
                                        [ 'spacesAndComments', [] ],
                                        [ 'commaList',
                                          [ 'arg',
                                            [ 'spacesAndComments', [] ],
                                            [ 'obj',
                                              [ 'commaList',
                                                [ 'objItem',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'name', 'block' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'string',
                                                    '\'',
                                                    [ 'b', '-', 'w', 'r', 'a', 'p', 'p', 'e', 'r' ] ],
                                                  [ 'spacesAndComments', [] ] ],
                                                [ 'objItem',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'name', 'content' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'getExprDot',
                                                    [ 'getExprDot',
                                                      [ 'keyword', 'this' ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'name', 'ctx' ] ],
                                                    [ 'spacesAndComments', [] ],
                                                    [ 'spacesAndComments', [] ],
                                                    [ 'name', 'content' ] ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                            [ 'spacesAndComments', [] ] ] ] ] ],
                                    [ 'spacesAndComments', [] ] ],
                                  [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                  [ 'spacesAndComments', [] ] ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [] ] ] ]);
    });

    it('should parse deeply nested template', function() {
      testParse('./basic/info7.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value',
                                  [ 'string', '\'', [ 'b', '-', 'l', 'i', 'n', 'k' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'elem',
                              [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                [ 'name', 'elem' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'e', '1' ] ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'tag' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody', [ 'string', '\'', [ 's', 'p', 'a', 'n' ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'custom',
                                      [ 'spacesAndComments', [] ],
                                      [ 'getExprDot',
                                        [ 'getExprDot',
                                          [ 'keyword', 'this' ],
                                          [ 'spacesAndComments', [] ],
                                          [ 'spacesAndComments', [] ],
                                          [ 'name', 'ctx' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'url' ] ],
                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'templateBlock',
                                  [ [ 'sub',
                                      [ [ 'spacesAndComments', [ [ 'spaces', '\n     ' ] ] ],
                                        [ 'predicates',
                                          [ 'pred',
                                            [ 'stdMode',
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', 'tag' ],
                                              [ 'spacesAndComments', [] ] ] ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'body',
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'literalBody', [ 'string', '\'', [ 'a' ] ] ] ] ] ],
                                    [ 'sub',
                                      [ [ 'spacesAndComments', [ [ 'spaces', '\n     ' ] ] ],
                                        [ 'predicates',
                                          [ 'pred',
                                            [ 'stdMode',
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', 'attrs' ],
                                              [ 'spacesAndComments', [] ] ] ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'body',
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'generalBody',
                                            [ 'blockStmt',
                                              [ 'stmts',
                                                [ 'stmt',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'returnStmt',
                                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                    [ 'obj',
                                                      [ 'commaList',
                                                        [ 'objItem',
                                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                          [ 'name', 'href' ],
                                                          [ 'spacesAndComments', [] ],
                                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                          [ 'getExprDot',
                                                            [ 'getExprDot',
                                                              [ 'keyword', 'this' ],
                                                              [ 'spacesAndComments', [] ],
                                                              [ 'spacesAndComments', [] ],
                                                              [ 'name', 'ctx' ] ],
                                                            [ 'spacesAndComments', [] ],
                                                            [ 'spacesAndComments', [] ],
                                                            [ 'name', 'url' ] ],
                                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                                    [ 'spacesAndComments', [] ] ],
                                                  [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                                  [ 'spacesAndComments', [] ] ] ] ] ] ] ] ],
                                    [ 'sub',
                                      [ [ 'spacesAndComments',
                                          [ [ 'spacesAndComments', [ [ 'spaces', '\n     ' ] ] ],
                                            [ 'spacesAndComments', [ [ 'spaces', '\n         ' ] ] ] ] ],
                                        [ 'predicates',
                                          [ 'pred',
                                            [ 'customMode',
                                              [ 'spacesAndComments', [] ],
                                              [ 'string', '\'', [ 'r', 'e', 's', 'e', 't' ] ],
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ],
                                          [ 'pred',
                                            [ 'stdMode',
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', 'attrs' ],
                                              [ 'spacesAndComments', [] ] ] ] ],
                                        [ 'spacesAndComments',
                                          [ [ 'spacesAndComments', [] ],
                                            [ 'spacesAndComments', [] ],
                                            [ 'spacesAndComments', [ [ 'spaces', '\n      ' ] ] ] ] ],
                                        [ 'body',
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'literalBody',
                                            [ 'obj',
                                              [ 'commaList',
                                                [ 'objItem',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'name', 'href' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'name', 'undefined' ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ] ] ] ],
                                    [ 'spacesAndComments', [ [ 'spaces', '\n   ' ] ] ] ] ] ] ],
                            [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ]);
    });

    it('should parse mod and elemMod', function() {
      testParse('./kparser/elem-mod.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value',
                                  [ 'string',
                                    '\'',
                                    [ 'i', '-', 'd', 'e', 'b', 'u', 'g', 'g', 'e', 'r' ] ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ [ 'sub',
                              [ [ 'spacesAndComments',
                                  [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                    [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'elem',
                                      [ [ 'spacesAndComments', [] ],
                                        [ 'name', 'elem' ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 'v', 'a', 'l' ] ] ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'pred',
                                    [ 'elemMod',
                                      [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'name', 'elemMod' ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 't', 'y', 'p', 'e' ] ] ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 'v', '1' ] ] ],
                                        [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'content' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments',
                                  [ [ 'spacesAndComments', [] ],
                                    [ 'spacesAndComments', [] ],
                                    [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ] ] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody', [ 'arr', [ 'spacesAndComments', [] ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments',
                                  [ [ 'spacesAndComments', [ [ 'spaces', '\n\n  ' ] ] ],
                                    [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'elem',
                                      [ [ 'spacesAndComments', [] ],
                                        [ 'name', 'elem' ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 'v', 'a', 'l' ] ] ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'pred',
                                    [ 'elemMod',
                                      [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'name', 'elemMod' ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 't', 'y', 'p', 'e' ] ] ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 'v', '2' ] ] ],
                                        [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'content' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments',
                                  [ [ 'spacesAndComments', [] ],
                                    [ 'spacesAndComments', [] ],
                                    [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ] ] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody', [ 'arr', [ 'spacesAndComments', [] ] ] ] ] ] ],
                            [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [] ] ] ]);
    });

    it('should parse applyCtx expr', function () {
      testParse('./kparser/general-body-apply-expr.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value',
                                  [ 'string', '\'', [ 'b', '-', 'i', 'n', 'n', 'e', 'r' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'def' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'generalBody',
                            [ 'blockStmt',
                              [ 'stmts',
                                [ 'stmt',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'returnStmt',
                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                    [ 'bracketedExpr',
                                      [ 'spacesAndComments', [] ],
                                      [ 'binop',
                                        [ 'xjst',
                                          [ 'applyCtx',
                                            [ 'spacesAndComments', [] ],
                                            [ 'commaList',
                                              [ 'arg',
                                                [ 'spacesAndComments', [] ],
                                                [ 'obj',
                                                  [ 'commaList',
                                                    [ 'objItem',
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'name', 'block' ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'string',
                                                        '\'',
                                                        [ 'b', '-', 'w', 'r', 'a', 'p', 'p', 'e', 'r' ] ],
                                                      [ 'spacesAndComments', [] ] ],
                                                    [ 'objItem',
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'name', 'content' ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'getExprDot',
                                                        [ 'getExprDot',
                                                          [ 'keyword', 'this' ],
                                                          [ 'spacesAndComments', [] ],
                                                          [ 'spacesAndComments', [] ],
                                                          [ 'name', 'ctx' ] ],
                                                        [ 'spacesAndComments', [] ],
                                                        [ 'spacesAndComments', [] ],
                                                        [ 'name', 'content' ] ],
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                                [ 'spacesAndComments', [] ] ] ] ] ],
                                        [ 'op',
                                          [ 'spacesAndComments', [] ],
                                          ',',
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                        [ 'number', '42' ] ],
                                      [ 'spacesAndComments', [] ] ],
                                    [ 'spacesAndComments', [] ] ],
                                  [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                  [ 'spacesAndComments', [] ] ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ])
    });

    it('should parse local', function () {
      testParse('./kparser/local.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'b', '1' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'content' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'generalBody',
                            [ 'blockStmt',
                              [ 'stmts',
                                [ 'stmt',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'returnStmt',
                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                    [ 'xjst',
                                      [ 'local',
                                        [ 'spacesAndComments', [] ],
                                        [ 'commaList',
                                          [ 'arg',
                                            [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                            [ 'binop',
                                              [ 'getExprDot',
                                                [ 'getExprDot',
                                                  [ 'keyword', 'this' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'name', 'ctx' ] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', 'cache' ] ],
                                              [ 'op',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                '=',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                              [ 'keyword', 'null' ] ],
                                            [ 'spacesAndComments', [] ] ],
                                          [ 'arg',
                                            [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                            [ 'string', '\'', [ 'r', 'e', 's', 'e', 't' ] ],
                                            [ 'spacesAndComments', [] ] ],
                                          [ 'arg',
                                            [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                            [ 'binop',
                                              [ 'getExprDot',
                                                [ 'keyword', 'this' ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', '_cachePos' ] ],
                                              [ 'op',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                '=',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                              [ 'getExprDot',
                                                [ 'getExprDot',
                                                  [ 'keyword', 'this' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'name', '_buf' ] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', 'length' ] ] ],
                                            [ 'spacesAndComments', [] ] ],
                                          [ 'arg',
                                            [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                            [ 'binop',
                                              [ 'getExprDot',
                                                [ 'keyword', 'this' ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', '_bla' ] ],
                                              [ 'op',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                '=',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                              [ 'string', '\'', [ 'b', 'l', 'a' ] ] ],
                                            [ 'spacesAndComments', [] ] ] ],
                                        [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'blockStmt',
                                          [ 'stmts',
                                            [ 'stmt',
                                              [ 'spacesAndComments', [] ],
                                              [ 'exprStmt',
                                                [ 'binop',
                                                  [ 'getExprDot',
                                                    [ 'getExprDot',
                                                      [ 'keyword', 'this' ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'name', '_buf' ] ],
                                                    [ 'spacesAndComments', [] ],
                                                    [ 'spacesAndComments', [] ],
                                                    [ 'name', 'length' ] ],
                                                  [ 'op',
                                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                    '=',
                                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                                  [ 'number', '42' ] ] ],
                                              [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                              [ 'spacesAndComments', [] ] ] ] ] ] ],
                                    [ 'spacesAndComments', [] ] ],
                                  [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                  [ 'spacesAndComments', [] ] ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ],
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'b', '2' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'content' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'generalBody',
                            [ 'blockStmt',
                              [ 'stmts',
                                [ 'stmt',
                                  [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                  [ 'xjst',
                                    [ 'local',
                                      [ 'spacesAndComments', [] ],
                                      [ 'commaList',
                                        [ 'arg',
                                          [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                          [ 'binop',
                                            [ 'getExprDot',
                                              [ 'getExprDot',
                                                [ 'keyword', 'this' ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', 'ctx' ] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', 'cache' ] ],
                                            [ 'op',
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                              '=',
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                            [ 'keyword', 'null' ] ],
                                          [ 'spacesAndComments', [] ] ],
                                        [ 'arg',
                                          [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                          [ 'string', '\'', [ 'r', 'e', 's', 'e', 't' ] ],
                                          [ 'spacesAndComments', [] ] ],
                                        [ 'arg',
                                          [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                          [ 'binop',
                                            [ 'getExprDot',
                                              [ 'keyword', 'this' ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', '_cachePos' ] ],
                                            [ 'op',
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                              '=',
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                            [ 'getExprDot',
                                              [ 'getExprDot',
                                                [ 'keyword', 'this' ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'name', '_buf' ] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', 'length' ] ] ],
                                          [ 'spacesAndComments', [] ] ],
                                        [ 'arg',
                                          [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                          [ 'binop',
                                            [ 'getExprDot',
                                              [ 'keyword', 'this' ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'spacesAndComments', [] ],
                                              [ 'name', '_bla' ] ],
                                            [ 'op',
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                              '=',
                                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                            [ 'string', '\'', [ 'b', 'l', 'a' ] ] ],
                                          [ 'spacesAndComments', [] ] ] ],
                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                      [ 'blockStmt',
                                        [ 'stmts',
                                          [ 'stmt',
                                            [ 'spacesAndComments', [ [ 'spaces', '\n    ' ] ] ],
                                            [ 'exprStmt',
                                              [ 'binop',
                                                [ 'getExprDot',
                                                  [ 'getExprDot',
                                                    [ 'keyword', 'this' ],
                                                    [ 'spacesAndComments', [] ],
                                                    [ 'spacesAndComments', [] ],
                                                    [ 'name', '_buf' ] ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'name', 'length' ] ],
                                                [ 'op',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  '=',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                                [ 'number', '42' ] ] ],
                                            [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                            [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ] ] ] ] ] ],
                                  [ 'stmtEnd', [ 'spacesAndComments', [] ], ';' ],
                                  [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [] ] ] ])
    });

    it('should parse whole-line comments', function() {
      testParse('./basic/info1.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments',
                      [ [ 'comment', '// comment here' ], [ 'spaces', '\n' ] ] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'tag' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'literalBody', [ 'string', '\'', [ 'i', 'm', 'g' ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [] ] ] ]
               );
    });

    it('should parse end-of-line comments', function() {
      testParse('./basic/info2.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'tag' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody', [ 'string', '\'', [ 'i', 'm', 'g' ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments',
                                  [ [ 'spaces', '                                 ' ],
                                    [ 'comment', '// end of line comment' ],
                                    [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'attrs' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody',
                                    [ 'bracketedExpr',
                                      [ 'spacesAndComments', [] ],
                                      [ 'obj',
                                        [ 'commaList',
                                          [ 'objItem',
                                            [ 'spacesAndComments', [] ],
                                            [ 'name', 'alt' ],
                                            [ 'spacesAndComments', [] ],
                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                            [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ],
                                            [ 'spacesAndComments', [] ] ],
                                          [ 'objItem',
                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                            [ 'name', 'href' ],
                                            [ 'spacesAndComments', [] ],
                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                            [ 'string',
                                              '\'',
                                              [ 'h', 't', 't', 'p', ':', '/', '/', '.', '.', '.' ] ],
                                            [ 'spacesAndComments', [] ] ] ] ],
                                      [ 'spacesAndComments', [] ] ] ] ] ] ],
                            [ 'spacesAndComments',
                              [ [ 'spaces', ' ' ],
                                [ 'comment', '// another comment' ],
                                [ 'spaces', '\n' ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ]);
    });

    it('should parse multi-line comments', function() {
      testParse('./basic/info5.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments',
                      [ [ 'comment',
                          '/*\n *\n  long winded comment here with code inside\n\n  block(\'logo\')(\n  tag()(\'img\'),\n  attrs()({alt: \'logo\', href: \'http://...\'})\n  )\n *\n*/' ],
                        [ 'spaces', '\n\n' ] ] ],
                    [ 'template',
                      [ [ 'spacesAndComments', [] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'b', '-', 'b', 'l', 'a' ] ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'tag' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [] ],
                                  [ 'literalBody', [ 'string', '\'', [ 's', 'p', 'a', 'n' ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'mod',
                                      [ [ 'spacesAndComments', [] ],
                                        [ 'name', 'mod' ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value',
                                          [ 'string', '\'', [ '0', '-', 'm', 'o', 'd', 'e' ] ] ],
                                        [ 'spaces', [ ' ' ] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'value', [ 'string', '\'', [ 'v', '2' ] ] ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                      [ 'name', 'tag' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [] ],
                                  [ 'literalBody', [ 'string', '\'', [ 'a' ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments',
                                  [ [ 'spaces', '\n  ' ],
                                    [ 'comment', '//  mod 0-mode v2, tag:\'a\'' ],
                                    [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'mix' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody',
                                    [ 'arr',
                                      [ 'commaList',
                                        [ 'arrItem',
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'obj',
                                            [ 'commaList',
                                              [ 'objItem',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                [ 'name', 'elemMods' ],
                                                [ 'spacesAndComments', [] ],
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                [ 'obj',
                                                  [ 'commaList',
                                                    [ 'objItem',
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'name', 'm2' ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'string', '\'', [ 'v', '2' ] ],
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                                [ 'spacesAndComments', [] ] ] ] ],
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ] ] ] ],
                            [ 'sub',
                              [ [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                                [ 'predicates',
                                  [ 'pred',
                                    [ 'stdMode',
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'js' ],
                                      [ 'spacesAndComments', [] ] ] ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'body',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'literalBody', [ 'bool', 'true' ] ] ] ] ],
                            [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ]
               );
    });

    it('should parse before and after comments', function () {
      testParse('./kparser/before-after-comments.bemhtml',
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'spacesAndComments',
                          [ [ 'spacesAndComments', [] ],
                            [ 'spacesAndComments',
                              [ [ 'spaces', '\n  ' ],
                                [ 'comment', '// before comment' ],
                                [ 'spaces', '\n  ' ] ] ] ] ],
                        [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spaces', [ ' ' ] ],
                                [ 'spacesAndComments', [] ],
                                [ 'value', [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [] ],
                              [ 'name', 'tag' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments',
                          [ [ 'spacesAndComments', [] ],
                            [ 'spacesAndComments', [] ],
                            [ 'spacesAndComments',
                              [ [ 'spaces', '\n  ' ],
                                [ 'comment', '// end of template comment' ],
                                [ 'spaces', '\n' ] ] ] ] ],
                        [ 'body',
                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                          [ 'generalBody',
                            [ 'blockStmt',
                              [ 'stmts',
                                [ 'stmt',
                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                  [ 'returnStmt',
                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                    [ 'getExprDot',
                                      [ 'getExprDot',
                                        [ 'keyword', 'this' ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'ctx' ] ],
                                      [ 'spacesAndComments', [] ],
                                      [ 'spacesAndComments', [] ],
                                      [ 'name', 'bla' ] ],
                                    [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ],
                                  [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                                  [ 'spacesAndComments', [] ] ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ], '\n' ],
                    [ 'spacesAndComments', [] ] ] ]);
    });

  });

  describe('Transformer', function () {

    it('should transform mixed js and templates', function () {
      testTransform('./ktransform/ext-js.bemhtml', {})
    });

    it('should transform multiple templates', function () {
      testTransform('./ktransform/multi.bemhtml', {});
    });

    it('should transform deeply nested template', function() {
      testTransform('./ktransform/nested.bemhtml', {});
    });

    it('should transform mod and elemMod', function() {
      testTransform('./ktransform/elem-mod.bemhtml', {});
    });

    it('should transform applyCtx expr', function () {
      testTransform('./ktransform/general-body-apply-expr.bemhtml', {})
    });

    it('should transform local', function () {
      testTransform('./ktransform/local.bemhtml', {})
    });

    it('should transform whole-line comments', function() {
      testTransform('./ktransform/whole-line-comments.bemhtml', {});
    });

    it('should transform end-of-line comments', function() {
      testTransform('./ktransform/end-of-line-comments.bemhtml', {});
    });

    it('should transform multi-line comments', function() {
      testTransform('./ktransform/multi-line-comments.bemhtml', {});
    });

    it('should transform before and after comments', function () {
      testTransform('./ktransform/before-after-comments.bemhtml', {});
    });

    // ----- bem-xjst4 ------------------------------------

    it('should replace BEMHTML.apply with this.reapply', function () {
      testTransform('./ktransform/reapply.bemhtml', {});
    });

  });

  describe('Compiler', function () {
    testDir('basic', testCompile);
  });

});
