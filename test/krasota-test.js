// parsing comments

var syntax = require(".."),
    assert = require("assert"),
    common = require("./common"),
    testParse = common.testKParse,
    testCompile = common.testKCompile,
    testDir = common.testDir;

var ibem = require('fs')
      .readFileSync(
        __dirname + '/../bower_components/bem-core/common.blocks/i-bem/i-bem.bemhtml',
        'utf8'),
    compat = require("bemhtml-compat"),
    esprima = require("esprima"),
    esgen = require("escodegen").generate,
    path = require("path"),
    fs = require("fs");

var pp = require("zeHelpers").prettyPrint;

var dir = path.join(path.dirname(module.filename), 'basic'),
    utf8 = { encoding:'utf8' },
    tests = [
      'info1',                  //whole-line
      'info2',                  //end-of-line
      'info5'                   //multi
    ].map(function (f) {
      return fs.readFileSync(path.join(dir, f + '.bemhtml'), utf8);
    });


describe('Meta info', function() {

  describe('Parser', function () {
    it('should parse whole-line comments', function() {
      testParse(tests[0],
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments',
                      [ [ 'comment', '// comment here' ], [ 'spaces', '\n' ] ] ],
                    [ 'template',
                      [ [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                [ 'value', [ 'string', 'logo' ] ],
                                [ 'spacesAndComments', [] ] ] ] ],
                          [ 'pred',
                            [ 'stdMode',
                              [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'name', 'tag' ],
                              [ 'spacesAndComments', [] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'body',
                          [ 'literalBody',
                            [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                              [ 'literal', [ 'string', '\'', [ 'i', 'm', 'g' ] ] ],
                              [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ]
               );
    });

    it('should parse end-of-line comments', function() {
      testParse(tests[1],
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments', [] ],
                    [ 'template',
                      [ [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                [ 'value', [ 'string', 'logo' ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ 'stmts',
                            [ 'stmt',
                              [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                              [ 'template',
                                [ [ 'predicates',
                                    [ 'pred',
                                      [ 'stdMode',
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'tag' ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'spacesAndComments', [] ],
                                  [ 'body',
                                    [ 'literalBody',
                                      [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'literal', [ 'string', '\'', [ 'i', 'm', 'g' ] ] ],
                                        [ 'spacesAndComments',
                                          [ [ 'spaces', '                                 ' ],
                                            [ 'comment', '// end of line comment' ],
                                            [ 'spaces', '\n  ' ] ] ] ] ] ] ] ],
                              [ 'stmtEnd' ],
                              [ 'spacesAndComments', [] ] ],
                            [ 'stmt',
                              [ 'spacesAndComments', [] ],
                              [ 'template',
                                [ [ 'predicates',
                                    [ 'pred',
                                      [ 'stdMode',
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'attrs' ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'spacesAndComments', [] ],
                                  [ 'body',
                                    [ 'literalBody',
                                      [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'literal',
                                          [ 'bracketedExpr',
                                            [ 'spacesAndComments', [] ],
                                            [ 'obj',
                                              [ 'commaList',
                                                [ 'objItem',
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'name', 'alt' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'string', '\'', [ 'l', 'o', 'g', 'o' ] ],
                                                  [ 'spacesAndComments', [] ] ],
                                                [ 'objItem',
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'name', 'href' ],
                                                  [ 'spacesAndComments', [] ],
                                                  [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                  [ 'string',
                                                    '\'',
                                                    [ 'h', 't', 't', 'p', ':', '/', '/', '.', '.', '.' ] ],
                                                  [ 'spacesAndComments', [] ] ] ] ],
                                            [ 'spacesAndComments', [] ] ] ],
                                        [ 'spacesAndComments',
                                          [ [ 'spaces', ' ' ],
                                            [ 'comment', '// another comment' ],
                                            [ 'spaces', '\n' ] ] ] ] ] ] ] ],
                              [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                              [ 'spacesAndComments', [] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ] 
               );
    });

    it('should parse multi-line comments', function() {
      testParse(tests[2],
                [ 'stmts',
                  [ 'stmt',
                    [ 'spacesAndComments',
                      [ [ 'comment',
                          '/*\n *\n  long winded comment here with code inside\n\n  block(\'logo\')(\n  tag()(\'img\'),\n  attrs()({alt: \'logo\', href: \'http://...\'})\n  )\n *\n*/' ],
                        [ 'spaces', '\n\n' ] ] ],
                    [ 'template',
                      [ [ 'predicates',
                          [ 'pred',
                            [ 'block',
                              [ [ 'spacesAndComments', [] ],
                                [ 'name', 'block' ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                [ 'value', [ 'string', 'b-bla' ] ],
                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                        [ 'spacesAndComments', [] ],
                        [ 'templateBlock',
                          [ 'stmts',
                            [ 'stmt',
                              [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ],
                              [ 'template',
                                [ [ 'predicates',
                                    [ 'pred',
                                      [ 'stdMode',
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'tag' ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'spacesAndComments', [] ],
                                  [ 'body',
                                    [ 'literalBody',
                                      [ [ 'spacesAndComments', [] ],
                                        [ 'literal', [ 'string', '\'', [ 's', 'p', 'a', 'n' ] ] ],
                                        [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ] ] ] ] ] ],
                              [ 'stmtEnd' ],
                              [ 'spacesAndComments', [] ] ],
                            [ 'stmt',
                              [ 'spacesAndComments', [] ],
                              [ 'template',
                                [ [ 'predicates',
                                    [ 'pred',
                                      [ 'mod',
                                        [ [ 'spacesAndComments', [] ],
                                          [ 'name', 'mod' ],
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'value', [ 'string', '0-mode' ] ],
                                          [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                          [ 'value', 'v2' ],
                                          [ 'spacesAndComments', [] ] ] ] ],
                                    [ 'pred',
                                      [ 'stdMode',
                                        [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'name', 'tag' ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'spacesAndComments', [] ],
                                  [ 'body',
                                    [ 'literalBody',
                                      [ [ 'spacesAndComments', [] ],
                                        [ 'literal', [ 'string', '\'', [ 'a' ] ] ],
                                        [ 'spacesAndComments',
                                          [ [ 'spaces', '\n  ' ],
                                            [ 'comment', '//  mod 0-mode v2, tag:\'a\'' ],
                                            [ 'spaces', '\n  ' ] ] ] ] ] ] ] ],
                              [ 'stmtEnd' ],
                              [ 'spacesAndComments', [] ] ],
                            [ 'stmt',
                              [ 'spacesAndComments', [] ],
                              [ 'template',
                                [ [ 'predicates',
                                    [ 'pred',
                                      [ 'stdMode',
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'mix' ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'spacesAndComments', [] ],
                                  [ 'body',
                                    [ 'literalBody',
                                      [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'literal',
                                          [ 'arr',
                                            [ 'commaList',
                                              [ 'arrItem',
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                [ 'obj',
                                                  [ 'commaList',
                                                    [ 'objItem',
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'name', 'elemMods' ],
                                                      [ 'spacesAndComments', [] ],
                                                      [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                      [ 'obj',
                                                        [ 'commaList',
                                                          [ 'objItem',
                                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                            [ 'name', 'm2' ],
                                                            [ 'spacesAndComments', [] ],
                                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                                            [ 'string', '\'', [ 'v', '2' ] ],
                                                            [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ],
                                                      [ 'spacesAndComments', [] ] ] ] ],
                                                [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ] ] ] ] ],
                                        [ 'spacesAndComments', [ [ 'spaces', '\n  ' ] ] ] ] ] ] ] ],
                              [ 'stmtEnd' ],
                              [ 'spacesAndComments', [] ] ],
                            [ 'stmt',
                              [ 'spacesAndComments', [] ],
                              [ 'template',
                                [ [ 'predicates',
                                    [ 'pred',
                                      [ 'stdMode',
                                        [ 'spacesAndComments', [] ],
                                        [ 'name', 'js' ],
                                        [ 'spacesAndComments', [] ] ] ] ],
                                  [ 'spacesAndComments', [] ],
                                  [ 'body',
                                    [ 'literalBody',
                                      [ [ 'spacesAndComments', [ [ 'spaces', ' ' ] ] ],
                                        [ 'literal', [ 'bool', 'true' ] ],
                                        [ 'spacesAndComments', [ [ 'spaces', '\n' ] ] ] ] ] ] ] ],
                              [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                              [ 'spacesAndComments', [] ] ] ] ] ] ],
                    [ 'stmtEnd', [ 'spacesAndComments', [] ] ],
                    [ 'spacesAndComments', [] ] ] ]
               );
    });

  });

  describe.skip('Compiler', function () {
    testDir('basic', testCompile);
  });

});
