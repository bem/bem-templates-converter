var ometajs = require("ometajs"),
    esprima = require("esprima"),
    assert = require("assert"),
    krasota = require("krasota"),
    KParser = krasota.KrasotaJSParser,
    KIdentity = krasota.KrasotaJSIdentity,
    KSerializer = krasota.KrasotaJSSerializer;

var pp = require("zeHelpers").prettyPrint;

function toMozNode(ast) {
  // TODO exprStmt rule is unlikely to work for all cases
  var code = KSerializer._flatjoin(KSerializer.match(ast, 'exprStmt'));
  if (ast[0] === ('obj')) {
    code = '(' + code + ')';
  }
  var mozAst = esprima.parse(code);
  var body = mozAst.body;
  assert(body.length === 1);
  return body[0].expression;
};

function isLiteral(ast) {
  if (ast.type === 'Literal')
    return true;

  if (ast.type === 'Identifier' && ast.name === 'undefined')
    return true;

  if (ast.type === 'ObjectExpression') {
    return ast.properties.every(function(prop) {
      return isLiteral(prop.value);
    });
  }

  if (ast.type === 'ArrayExpression') {
    return ast.elements.every(function(elem) {
      return isLiteral(elem);
    });
  }

  return false;
};

ometa Parser <: KParser {

  topLevel = [(bemStmts | sc):c] -> c
    | ^topLevel,

  isXjstKeyword :x = ?(x === 'local' || x === 'apply' || x === 'applyNext' || x === 'applyCtx'),
  xjstKeyword :k = iName:kk isXjstKeyword(kk) ?(!k || k == kk) -> [#xjstKeyword, kk],

  localStmt = xjstKeyword(#local) sc:sc1 args:as sc:sc2 block:c -> [#local, sc1, as, sc2, c],

  applyExpr :k = xjstKeyword(k) sc:sc1 args:as -> [k, sc1, as],
  xjstApply = applyExpr(#apply)
    | applyExpr(#applyNext)
    | applyExpr(#applyCtx),

  expr = xjstApply
    | ^expr,

  stmtContent = localStmt
    | ^stmtContent,

  bemStmts = bemStmt+:c -> [#stmts].concat(c),

  bemStmt = sc:sc1 bemStmtContent:c stmtContentEnd(c):se sc:sc2 -> [#stmt, sc1, c, se, sc2],

  bemStmtContent = template
    | ^stmtContent,

  template = predRest:t -> [#template, t],

  templateBlock = '{' (bemStmts | sc):c '}' -> [#templateBlock, c],

  predicates :t = apply(t):x (',' apply(t))*:xs -> [#predicates, x].concat(xs),

  predRest = (predicates(#pred) | sc):as sc:s templateBlock:c -> [as, s, c],
  predRest = (predicates(#pred) | sc):as sc:s body:c -> [as, s, c],

  pred = (bemMatch | bemMode | bemCustom):p -> [#pred, p],

  body = ':' bodyContent:bc -> [#body, bc],

  // TODO literal check is busted, needs thorough testing and maybe a fix
  bodyContent = sc:sc1 asgnExpr:c sc:sc2 ','? maybeLiteral(c):bc -> [#literalBody, [ sc1, bc, sc2]]
    | ^stmt:bc ','? -> [#generalBody, bc],

  maybeLiteral :c = ?isLiteral(toMozNode(c)) -> [#literal, c],

  bemMatch = bemBlock | bemElem | bemMod,

  bemMode = sc:sc1 maybeMode:m sc:sc2 -> [m[0], sc1, [#name, m[1]], sc2],

  bemCustom = sc:sc1 asgnExpr:e sc:sc2 -> [#custom, sc1, e, sc2],

  bemBlock = bemPredic('block'):p -> [#block, p],
  bemElem = bemPredic('elem'):p -> [#elem, p],
  bemMod = bemPredic('mod'):p bemModVal:rv sc:sc4 -> [#mod, p.concat([[#value, rv], sc4])],
    | bemPredic('elemMod'):p bemModVal:rv sc:sc4 -> [#elemMod, p.concat([[#value, rv], sc4])],

  bemPredic :n = sc:sc1 seq(n):nn sc:sc2 bemVal:lv sc:sc3 -> [sc1, [#name, nn], sc2, [#value, lv], sc3],

  maybeMode = modeName:n &(spaces ('{' | ':' | ',')) -> Parser.getMode(n),

  bemVal = (letter | digit | '-')+:xs -> [#string, xs.join('')]
    | asgnExpr:e -> e,

  bemModVal = bool
    | iName
    | bemVal,

  modeName = <letter (letter | digit | '-' | '_')*>:n ~isPrimitive(n) -> n,

  isPrimitive :n =  ?Parser._isPrimitive(n)
}

Parser.getMode = (function(ks, k) {
  var keywords = {};
  while(k = ks.shift()) keywords[k] = (k === 'default')? 'def': k;
  return function(k) {
    return keywords.hasOwnProperty(k)?
      ['stdMode', keywords[k]]:
      ['customMode', k];
  }
})(['tag', 'attrs', 'content', 'default', 'js', 'mix', 'bem', 'jsAttr', 'cls'])

Parser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

Parser._isPrimitive = function(name) {
  return Parser._primitives[name];
};

ometa KTransformer <: KIdentity {

  topLevel = ^topLevel,

}
