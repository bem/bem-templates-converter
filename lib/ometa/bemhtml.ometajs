var xjst = require('xjst'),
    XJSTParser = xjst.XJSTParser,
    XJSTIdentity = xjst.XJSTIdentity,
    XJSTCompiler = xjst.XJSTCompiler,
    Jail = require('./jail').Jail,
    ometajs = require('ometajs'),
    BSJSParser = ometajs.grammars.BSJSParser;

var pp = require("zeHelpers").prettyPrint;

// TODO This checks if Mozilla AST node is literal. I maybe able to serialize a
// body using BSJSTranslator, parse with Esprima then use this function to
// check. Heavy and ugly but straightforward.
var isLiteral = xjst.utils.isLiteral;

ometa BEMHTMLParser <: BSJSParser {
  // isKeyword = :x ?(x === 'applyCtx')
  //           | ^isKeyword,

  bemMatch = bemBlock | bemElem | bemMod,

  bemVal = (letter | digit | '-')+:xs -> [#string, xs.join('')],
  bemVal = asgnExpr:e -> e,

  bemPredic :n = spaces seq(n):nn space+ -> nn,

  bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
  bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
  bemModVal = iName:n ?(n === 'true' || n === 'false') -> [#get, n]
            | bemVal,
  bemMod = bemPredic('mod') bemVal:m space+ bemModVal:v -> [#blockMod, m, v],
  bemMod = bemPredic('elemMod') bemVal:m space+ bemModVal:v -> [#elemMod, m, v],

  bemCustom = asgnExpr:e -> [#xjst, e],

  bemhtmlSet = spaces <letter (letter | digit | '-' | '_')*>:nn
               &(spaces ('{' | ':' | ','))
               ?(!BEMHTMLParser._isPrimitive(nn))
               -> [ nn ],

  bemMatchAndSet = (bemMatch | bemhtmlSet | bemCustom),
  listBemMatchAndSet %(this.predicates = []) = bemMatchAndSet:t spaces
                     ( ',' spaces listBemMatchAndSet:ts -> {
                       [t, ts]
                     } | '{' spaces listBemMatchAndSet+:ts spaces '}'
                          spaces -> {
                            [t, ts]
                     } | ':' (asgnExpr:e -> [#begin, [#return, e]]
                             | stmt):c ','? ->
                       [t, [#body, this._jail.match(
                         c,
                         'topLevel',
                         ['_$' + (BEMHTMLParser._jailId++).toString(36)]
                       )]]
                     ):r -> {
                       if (this.predicates.length === 0) return r;
                       BEMHTMLParser._concatChildren(
                         [#xjst, this.predicates],
                         r
                       )
                     } | ^stmt:r -> [#stmt, r],

  topLevel = listBemMatchAndSet*:ts spaces end -> {
    // BEMHTMLParser._addElemPredic(BEMHTMLParser._dropAllSubs(ts))
    BEMHTMLParser._dropAllSubs(ts)
  }
}

BEMHTMLParser.prototype._jail = Jail;
BEMHTMLParser._jailId = 0;

BEMHTMLParser._transMode = function transMode(e) {
    function traverse(e) {
    if (e[0] !== 'binop' && e[1] !== ',') return [ e ];
    return [].concat(traverse(e[2]), traverse(e[3]));
  }

  return traverse(e).map(function (e) {
    if (e[0] !== 'string') return e;
    return [#set, [#getp, [#string, '_mode'], [#this]], e];
  }).reduce(function (acc, current) {
    return [#binop, ',', acc, current];
  });
};

BEMHTMLParser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

BEMHTMLParser._isPrimitive = function(name) {
  return BEMHTMLParser._primitives[name];
};

BEMHTMLParser._concatChildren = function(p, cs) {
  if (cs[0] !== 'sub') return [p].concat(cs);

  return [#sub, [].concat.apply([], cs[1].map(function(cs) {
    var cc = BEMHTMLParser._concatChildren(p, cs);
    return cc[0] === 'sub' ? cc[1] : [cc];
  }))];
};

BEMHTMLParser._dropAllSubs = function(ts) {
  return [].concat.apply([], ts.map(function(t) {
    return t[0] === 'sub' ? t[1] : [t];
  }));
};

BEMHTMLParser._addElemPredic = function(ts) {
  function isSafePredic(p) {
    switch (p[0]) {
      case 'get':
      case 'string':
      case 'number':
        return true;
      case 'getp':
        // Either this["some not elem property"],
        // or (some other host)["any property"]
        return p[2][0] === 'this' ?
            p[1][0] !== 'call' &&
            (p[1][0] !== 'string' || p[1][1] !== 'elem')
            :
            p[2][0] !== 'call';
      case 'unop':
        return isSafePredic(p[2]);
      case 'binop':
        return isSafePredic(p[2]) && isSafePredic(p[3]);
      default:
        return false;
    }
  }

  ts.forEach(function(t) {
    var isBlock,
        isNotElem;

    isBlock = t.some(function(p) {
      return p[0] === 'block';
    });

    if (!isBlock) return;

    isNotElem = t.every(function(p) {
      if (p[0] === 'elem' ||
          p[0] === 'xjst' && !isSafePredic(p[1])) {
        return false;
      }

      return true;
    });

    if (!isNotElem) return;

    t.unshift([
      'xjst',
      ['unop', '!', ['getp', ['string', 'elem'], ['this']]]
    ]);
  });
  return ts;
};

ometa BEMHTMLToXJST <: BSJSIdentity {
  bhPredic = [#block :e] -> [#block, e],
  bhPredic = [#blockMod :m :v] -> [#blockMod, m, v],
  bhPredic = [#elem :e] -> [#elem, e],
  bhPredic = [#elemMod :m :v] -> [#elemMod, m, v],
  bhPredic = [#xjst :e] -> [#xjst, e],

  bhPredic = [#std :m] -> [#std, m],
  bhPredic = [#mode :m] -> [#mode, m],
  bhPredic = [ :m ] -> [this.isStandardMode(m)? #std: #mode, m],

  bhBody = [#body :b] -> [#body, b],
  subBlock = [#sub :ts] -> [#sub, ts],
  subBlock = [subTemplate+:ts] {pp(ts, {prompt: "subBlock out"});} -> [#sub, ts],
  subMethod = [#dot :ts] -> [#dot, ts],
  subMethod = subTemplate:ts  {pp(ts, {prompt: "subMethod out"});}-> [#dot, ts],

  subTemplate = [bhPredic:ps {pp(ps, {prompt: "sub bhPredicate+"});}
                 (bhBody:b    {pp(b, {prompt: "sub bhBody"});} -> b
                  | subBlock:s    {pp(s, {prompt: "sub subBlock"});} -> s
                  | subMethod:m {pp(m, {prompt: "sub subMethod"});} -> m
                 ):ts] -> [ps, ts],

  bhTemplate = [bhPredic:ps {pp(ps, {prompt: "bhPredicate+"});}
                (bhBody:b    {pp(b, {prompt: "bhBody"});} -> b
                 | subMethod:m {pp(m, {prompt: "subMethod"});} -> m
                 | subBlock:s {pp(s, {prompt: "subBlock"});} -> s
                ):ts] {pp(ps.concat(['...']), {prompt: "bhTemplate matched"});} -> [ ps, ts ]
    | [#stmt anything]:r -> r,

  topLevel = [bhTemplate+:ts] -> ts,
  topLevel = bhTemplate:t -> [t],
  topLevel = end -> []
}

BEMHTMLToXJST.prototype.isStandardMode = function isStandardMode(m) {
  var modes = ['tag', 'attrs', 'content', 'default', 'js', 'mix', 'bem', 'jsAttr', 'cls'];
  return modes.some(function (curr) { return curr === m; });
};

BEMHTMLToXJST.cons = function cons(arr) {
  return arr.reduce(function(prev, curr) {
    return ['binop', '&&', prev, curr];
  });
};

ometa XJSTToJS <: BSJSTranslator {
  applyStmt = :param -> { param.code || 'apply()' },

  nhApplyStmt = :param -> 'apply()',
  nhApplyExpr -> 'apply()',

  prop = [#getp [#string :p] [#this]] -> p
       | [#getp [#string :p] prop:p2] -> p2 + '.' + p,

  changes = [#binop ',' changes:l changes:r]:a -> l + ', ' + r
          | [#set prop:p trans:v] -> {
            JSON.stringify(p) + ': (' + v + ')'
          }
          | [#string :mode] -> '_mode: ' + JSON.stringify(mode)
          | [#json trans*:bindings] -> bindings.join(', ')
          | {
            throw new Error('Unsupported local' +
                            JSON.stringify(this._source.slice(this._offset)))
            "";
          },

  localStmt = changes:a :ast trans(ast):b -> {
    // New-style syntax
    if (ast[0] === 'parens' && ast[1][0] === 'func') {
      return 'local({ ' + a + ' })' + b + ';';
    }
    'local({ ' + a + ' })(function() { ' + b + '});'
  },
  localExpr = changes:a :ast trans(ast):b -> {
    // New-style syntax
    if (ast[0] === 'parens' && ast[1][0] === 'func') {
      return 'local({ ' + a + ' })' + b;
    }
    'local({ ' + a + ' })(function() { return ' + b + '})'
  },

  localStart = :as :vars -> '""',
  localEnd -> '""',

  predicates = [#binop '&&' predicates:l predicates:r] -> {
               l + ', ' + r
             } | trans:r -> 'function() { return ' + r + ' }',

  template = [#template predicates:m trans:b] -> (
    'match(' + m + ')(function() {' + b + '})'
  ),

  item = template:r -> r
       | [#stmt [#return anything]] -> ''
       | [#stmt
           [#unop '!'
             [#call [#func 'oninit' anything trans:body] anything*]
           ]
         ] -> 'oninit(function(exports) ' + body + ')'
       | [#stmt trans:r] -> r,
  topLevel = [ item*:rs ] -> 'var cache;\n' + rs.join(';\n')
}
